// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicProjectApp.Models;

#nullable disable

namespace MusicProjectApp.Migrations
{
    [DbContext(typeof(GrupoAContext))]
    partial class GrupoAContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MusicProjectApp.Models.Albumes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("Fecha")
                        .HasColumnType("date");

                    b.Property<string>("Genero")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Titulo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Albumes");
                });

            modelBuilder.Entity("MusicProjectApp.Models.Artistas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("Fecha")
                        .HasColumnType("date");

                    b.Property<string>("Genero")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Artistas");
                });

            modelBuilder.Entity("MusicProjectApp.Models.Canciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AlbumId")
                        .HasColumnType("int");

                    b.Property<int?>("ArtistaId")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ArtistaId");

                    b.ToTable("Canciones");
                });

            modelBuilder.Entity("MusicProjectApp.Models.Festival", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArtistaId")
                        .HasColumnType("int");

                    b.Property<string>("Ciudad")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("FechaFinal")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("FechaInicio")
                        .HasColumnType("date");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ArtistaId");

                    b.ToTable("Festival");
                });

            modelBuilder.Entity("MusicProjectApp.Models.Canciones", b =>
                {
                    b.HasOne("MusicProjectApp.Models.Albumes", "Album")
                        .WithMany("Canciones")
                        .HasForeignKey("AlbumId")
                        .HasConstraintName("FK_Canciones_Albumes");

                    b.HasOne("MusicProjectApp.Models.Artistas", "Artista")
                        .WithMany("Canciones")
                        .HasForeignKey("ArtistaId")
                        .HasConstraintName("FK_Canciones_Artistas");

                    b.Navigation("Album");

                    b.Navigation("Artista");
                });

            modelBuilder.Entity("MusicProjectApp.Models.Festival", b =>
                {
                    b.HasOne("MusicProjectApp.Models.Artistas", "Artista")
                        .WithMany("Festival")
                        .HasForeignKey("ArtistaId")
                        .HasConstraintName("FK_Festival_Artistas");

                    b.Navigation("Artista");
                });

            modelBuilder.Entity("MusicProjectApp.Models.Albumes", b =>
                {
                    b.Navigation("Canciones");
                });

            modelBuilder.Entity("MusicProjectApp.Models.Artistas", b =>
                {
                    b.Navigation("Canciones");

                    b.Navigation("Festival");
                });
#pragma warning restore 612, 618
        }
    }
}
